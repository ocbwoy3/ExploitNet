
--local getgenv, WebSocket, gethui = function() return _G end, {connect=function(a) local a={} function a:Send(_)end a.OnMessage=Instance.new("BindableEvent").Event	a.OnClose=Instance.new("BindableEvent").Event return a end}, function() return Instance.new("Folder") end

if (not getgenv) and (not WebSocket) then
	error("Unsupported Exploit!")
end

if ExploitNet then
	ExploitNet.Stop()
	wait(2)
end

local ADDRESS = "ws://127.0.0.1:8080"

local http = game:GetService('HttpService')
local LP = game:GetService("Players").LocalPlayer

local should_exploitnet_run = true

local function convertToHtmlEntitites(text)
	return tostring(text):gsub('&','&amp;'):gsub("<", "&lt;"):gsub(">", "&gt;"):gsub('"', "&quot;"):gsub("'", "&apos;")
end

local huifunc = get_hidden_gui or gethui

local function make_ui()
	local tb = Instance.new("TextBox")
	tb.Text = ""
	tb.PlaceholderText = "[Click to message]"
	tb.Font = Enum.Font.SourceSansBold
	tb.Name = http:GenerateGUID(false):gsub("%-","")
	tb.AnchorPoint = Vector2.new(0,1)
	tb.Position = UDim2.new(0,10,1,-10)
	tb.Size = UDim2.new(0,400,0,32)
	tb.TextSize = 32
	tb.BackgroundTransparency = 1
	tb.BorderSizePixel = 0
	tb.TextXAlignment = Enum.TextXAlignment.Left
	tb.TextYAlignment = Enum.TextYAlignment.Bottom
	tb.TextColor3 = Color3.new(1,1,1)

	tb.FocusLost:Connect(function(enterPressed: boolean, inputThatCausedFocusLoss: InputObject)
		if enterPressed == true then
			local t = tb.Text
			tb.Text = ""
			ExploitNet.SendMessage(http:JSONEncode({
				MessageOrder = {
					type = "USER",
					sender = "",
					game = game.PlaceId,
					content = t
				}	
			}))
		end
	end)

	--[[
	if huifunc then
		local g = Instance.new("ScreenGui")
		g.Name = http:GenerateGUID(false):gsub("%-","")
		g.Parent = huifunc()
		return g
	end
	--]]

	local cg = game:GetService("CoreGui")
	local robloxg = cg:FindFirstChild("RobloxGui")

	if not robloxg then
		local g = Instance.new("ScreenGui")
		g.Name = http:GenerateGUID(false):gsub("%-","")
		g.Parent = cg
		return g
	end

	tb.Parent = robloxg
	return tb
end

local cached_placenames = {}

local function getPlaceNameFromId(id)
	if cached_placenames[id] then
		return cached_placenames[id]
	end
	local name = "Unknown"
	local success, err = pcall(function()
		name = game:GetService("MarketplaceService"):GetProductInfo(id).Name
	end)
	if success then
		cached_placenames[id] = name
	end
	return name
end

local function ConnectToServer()
	if should_exploitnet_run == false then return end
	print("[WS]","Connecting")
	local gui = make_ui()
	local ws = WebSocket.connect(ADDRESS)
	getgenv().ExploitNet.Socket = ws
	getgenv().ExploitNet.SendMessage = function(c) ws:Send(c) end
	getgenv().ExploitNet.Stop = function()
		should_exploitnet_run = false
		ws:Close()
		getgenv().ExploitNet = nil
	end

	ws.OnMessage:Connect(function(m:string)
		local success, reason = pcall(function()
			local d = http:JSONDecode(m)
			if d.error then
				warn("[WS]","Server error:",d.error)
				return
			end
			if d.MessageOrders then
				local sg = game:GetService("StarterGui")
				local rbxsys: TextChannel = game:GetService("TextChatService"):FindFirstChild("TextChannels"):FindFirstChild("RBXSystem")

				for _, order in pairs(d.MessageOrders) do
					local pid = order.game
					local pln = getPlaceNameFromId(pid)

					-- Send message
					sg:SetCore("ChatMakeSystemMessage",{
						Text = `[ExploitNet]{ pid == game.PlaceId and "" or ` [from {pln}]` } {order.sender}: {order.content}`
					})
					rbxsys:DisplaySystemMessage(`<b><font color="#ff0000">{ pid == game.PlaceId and "" or `[From {convertToHtmlEntitites(pln)}] ` }{convertToHtmlEntitites(order.sender)}:</font></b> <font color="#ffffff">{convertToHtmlEntitites(order.content)}</font>`)
				end


			end
		end)
	end)

	ws.OnClose:Connect(function()
		print("[WS]","Closed")
		gui:Destroy()
		wait(0.5)
		ConnectToServer()
	end)

	ws:Send(http:JSONEncode({LinkRobloxAccount=LP.UserId}))

end

getgenv().ExploitNet = {
	Connect = ConnectToServer
}

ConnectToServer()